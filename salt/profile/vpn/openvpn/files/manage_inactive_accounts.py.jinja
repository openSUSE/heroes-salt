#!/usr/bin/python3.11

import json
import logging
import os
import smtplib
import sys
from datetime import datetime
from email.message import EmailMessage
from smtplib import SMTPConnectError

import urllib3
from dateutil import parser, tz

"""
{{ pillar['managed_by_salt'] }}

Desciption:
  This script performs two jobs:
   1. Find inactive users & notify them to login timely
   2. if the user did not login even after notice, Report them to the admin

See: https://progress.opensuse.org/issues/160508

Author: karthik@opensuse.org
"""
# the no of days for which the user did not login
_inactive_days: int = 179
# notice days for user
_user_notice_days: int = 14
# the directory of the vpn logs
vpn_log_dir: str = "/var/log/vpn_logins"

api_base_url: str = "https://idm.infra.opensuse.org"

# file where user info is stored
_db_name: str = "/var/lib/vpn_logins/inactive-users.json"

# NOTE: only used for caching purpose
# do not use this dict directly in logic
cache: dict[str, list[str]] = {"vpn_group": [], "vpn_logs": []}
# logging config
logging.basicConfig(
    format="%(levelname)s [L%(lineno)d]: %(message)s", level=logging.INFO,
)

log = logging.getLogger("manage-vpn-users")


def api_key() -> str:
    """get api key from the KANIDM_API_KEY environment variable"""
    key = os.getenv("KANIDM_API_KEY")
    if key is not None:
        return key
    stop_script("KANIDM_API_KEY not set!")
    return ""


def stop_script(msg):
    """stops the script with non success status"""
    log.critical(msg)
    sys.exit(1)


def date_now() -> datetime:
    return datetime.now(tz.UTC)


def days_since(date: str) -> int:
    """Number of days elapsed since given date"""
    date_obj = parser.parse(date)
    today = date_now()
    elapsed_days = (today - date_obj).days
    return elapsed_days


# extracts & returns the last login date of the user from their
# respective vpn log
def last_login(file: str) -> str:
    """User's last login date"""
    try:
        with open(f"{vpn_log_dir}/{file}", "r") as f:
            contents = f.read().split(";")
            return contents[2]
    except FileNotFoundError:
        stop_script("cannot fetch last_login details")
        return ""


def send_email(to_addr: str, subject: str, body: str, from_addr: str = "admin@opensuse.org"):
    """Sends email to the specified email address"""
    log.debug(f"sending email to {to_addr}")

    # Create a text/plain message
    msg = EmailMessage()

    msg["From"] = from_addr
    msg["To"] = to_addr
    msg["Subject"] = subject
    msg.set_content(body)

    try:
        # Send the message via our own SMTP server.
        s = smtplib.SMTP("localhost")
        s.send_message(msg)
        s.quit()

    except SMTPConnectError as e:
        stop_script(f"Failed to send email to {to_addr}\nReason: {e}")

    except ConnectionRefusedError as e:
        stop_script(f"Failed to send email to {to_addr}\nReason: {e}")


def notify_user(user: str):
    """notify the user to login to the VPN"""

    # for existing users
    mail_body = f"""
            Hello {user}

            You did not connect to the Heroes VPN for more than {_inactive_days + 1} days.

            To keep your account active, please login within {_user_notice_days + 1} days of this notice.

            Failing to do so, Your account will be marked for removal.

            This is an automated mail. Please do not respond.
            """
    email_ids = user_info(user)

    # for users who did not login even once
    if user in users_without_logs():
        mail_body = f"""
        Hello {user}

        You did not login to the Heroes VPN yet.

        To keep your account active, please login within {_user_notice_days + 1} days of this notice.

        This is an automated mail. Please do not respond.
        """

    email_ids = user_info(user)

    if email_ids is not None:
        # an user can have multiple emails
        # sending mails to all the accounts
        for mail in email_ids:
            subject = "[openSUSE] Action required for your Heroes account"
            send_email(mail, subject, mail_body)

    # TODO: some users do not have email id
    # Reason could be that the admin forgot to add their id during creating their account
    else:
        log.error(f"{user} email not found")


def notify_admin(user: str):
    """informs the admin to remove a user"""
    send_email(
        "admin@opensuse.org",
        f"[Heroes VPN] {user} is inactive",
        "Please prepare the user for removal",
        "inactive-heroes@opensuse.org",
    )


def db_load() -> dict:
    """load database from the file & return it"""
    try:
        with open(_db_name, "r") as f:
            obj = json.loads(f.read())
            return obj
    except ValueError as e:
        raise e


def db_save(config: dict):
    """save database to a file"""
    with open(_db_name, "wt") as f:
        f.write(json.dumps(config, indent=2))


def inactive_users() -> list[str]:
    """Returns list of users who did not login for more than _inactive_days"""
    log_dir = users_in_vpn_logs()
    u = []
    for user in log_dir:
        days = days_since(last_login(user))
        if days >= _inactive_days:
            u.append(user)
    return u


def users_in_kanidm_group() -> list[str]:
    """users who are part of the kanidm vpn group"""

    cached_result = cache["vpn_group"]

    if len(cached_result) > 0:
        return cached_result

    api = f"{api_base_url}/v1/group/vpn/_attr/member"
    r = urllib3.request(
        method="GET", url=api, headers={"Authorization": f"Bearer {api_key()}"},
    )
    if r.status == 200:
        res = [string.split("@")[0] for string in r.json()]
        cache["vpn_group"] = res
        return res
    else:
        stop_script(f"Failed to access the {api}")
        return []


def users_in_vpn_logs() -> list[str]:
    """list all users in vpn logs"""

    cached_result = cache["vpn_logs"]

    if len(cached_result) > 0:
        return cached_result

    try:
        logs = os.listdir(vpn_log_dir)
        # we do not need the archive dir
        logs.remove("archive")
        cache["vpn_logs"] = logs
        return logs

    except FileNotFoundError as e:
        stop_script(f"Failed to access the log dir\n{e}")
        return []


def user_info(u: str):
    """fetch the user email via api"""
    api = f"{api_base_url}/v1/person/{u}/_attr/mail"
    r = urllib3.request(
        method="GET", url=api, headers={"Authorization": f"Bearer {api_key()}"},
    )
    if r.status == 200:
        return r.json()
    else:
        stop_script(f"Failed to access {api}")
        return []


def users_without_logs() -> list[str]:
    """These users did not login to  vpn even once"""
    log.info("Checking for users without logs")
    users: list[str] = []
    # check if kanidm group user present in logs
    for group_user in users_in_kanidm_group():
        if group_user not in users_in_vpn_logs():
            users.append(group_user)
    return users


# user management logic begins
##############################
db: dict = {}
try:
    db = db_load()
except FileNotFoundError:
    log.warning("database not found")

shortlisted_users = users_without_logs() + inactive_users()

for user in shortlisted_users:
    # if the user exists in db
    if user in db:
        # for inactive users with logs
        if (
            user in users_in_vpn_logs()
            and days_since(db[user]["notified_on"]) > _user_notice_days
        ):
            # if the user did not login after the notice period ended
            if days_since(last_login(user)) > _inactive_days:
                log.info(f"{user} did not login even after notice period")
                # report them to admin, if haven't
                if "notified_admin_on" not in db[user]:
                    log.info(f"Reporting {user} to the admin")
                    notify_admin(user)
                    db[user]["notified_admin_on"] = str(date_now())

        # user who is in vpn group but still not in logs
        if user in users_in_kanidm_group() and user not in users_in_vpn_logs():
            if days_since(db[user]["notified_on"]) > _user_notice_days:
                log.info(f"{user} notice period ended, still never logged in")
                # if not reported to admin yet, report them
                if "notified_admin_on" not in db[user]:
                    log.info(f"Reporting {user} to the admin")
                    notify_admin(user)
                    db[user]["notified_admin_on"] = str(date_now())

    else:
        log.info(f"Notifying inactive user: {user}")
        notify_user(user)
        # create an entry in the db for the user
        db[user] = {"notified_on": str(date_now())}

# Database Cleanup Tasks
to_be_removed: list = []

for user in db:
    # remove user from the db if the they are not in vpn group anymore
    if user not in users_in_kanidm_group():
        # it means the user was removed by admin
        # so, we can delete the user from the db
        log.info(f"db: removing {user} not found in kanidm")
        to_be_removed.append(user)

    # remove the user if they have a recent login activity
    if user in users_in_vpn_logs():
        if days_since(last_login(user)) < _inactive_days:
            log.info(f"db: removing {user} due to recent login activity")
            to_be_removed.append(user)

# remove the collected list of users from the db
for user in to_be_removed:
    del db[user]

db_save(db)
